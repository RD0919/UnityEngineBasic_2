1 주차
클래스화 : 객체를 정의한다
객체화 : 기능을 정의하고 메모리에 할당
컴파일 : 다른언어체계로 번역하는 과정
컴파일러 : 컴파일 프로그램
어셈블리어 : 1:1 매핑으로 컴파일을 빠르게 해준다
가상머신 : 개발자가 놓치기 쉬운 부분들을 알아서 처리해주는 기계
intermidiate Langauge : 가상머신의 기능과 1:1 매핑되는 언어
HDD : 파일들이 저장됨
CPU : 메모리의 값을 읽어 연산 후 결과를 출력
(*중요*) 병목현상 : 메모리 정보 속도와  CPU 처리속도간의 차이에 의해 나타나는 현상
RAM : HDD에 실해 프로그램을 검색하고 RAM에 복사한다(현재 실행 중인 프로그램 내에서만 검색하면 되기 때문에 불필요한 데이터 탐색이 없어진다, 전송속도는 HDD보다 빠름)
Cache : Cache의 데이터 전송 속도는 RAM보다 빠르다 인접한 데이터를 어느 크기(이게 캐쉬라인)만큼 복제해놓기 때문에 CPU에서 전체 RAM을 탐색해야 하는 경우를 줄여준다
- 캐쉬 히트 캐시라인 단위(대부분 64바이트)로 읽은 데이터에서 필요한 데이터를 찾음
- 캐쉬 미스 : 캐쉬라인 단위(대부분 64바이트)로 읽은 데이터에서 필요한 데이터를 못 찾음
bit : 정보 처리의 최소 단위 (0, 1이 있음)
byte : 데이터의 최소 묶음 단위(8bit) bit를 묶어서 한번에 처리
{"여기서부터는 내지역이다"라는 표시} : 중괄호
함수 : f(x) = ax + b
함수 이름 : f
입력(매개 변수 = parameter) : x
함수 연산 내용 : ax+ b
Data type (자료형) 자주 사용될만한 자료들에 대해서 미리 정의해놓은 형태
int : 부호가 있는 정수형(4byte)
long : 부호가 있는 정수형(8byte)
uint : 부호가 없는 정수형(4byte)
ulong : 부호가 없는 정수형(8byte)
short : 부호가 있는 정수형(2byte)
ushort : 부호가 있는 정수형(2byte)
char : 문자형(2byte) - ASCII코드표에 따름
float : 실수형(4byte)
double : 실수형(8byte)
bool : 논리형(1byte)(0이면 거짓, 0이 아니면 참)
작은 자료형에서 큰 자료형(암시적 캐스팅)으로 빠꾸는 것은 가능하나 반대는 안된다
어떤 자료형을  더 큰 동일형태의 자료형으로 읽는 것은 가능(자료형의 승격)
더 작은 크기의 자료형으로 읽는 것은 명시하지 않으면 불가능(자료 손실이 일어나기 때문)
2의 보수 : 모든 비트 반전 후 +1
